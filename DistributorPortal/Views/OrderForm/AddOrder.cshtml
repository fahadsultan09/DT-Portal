@model OrderViewModel
@inject IUnitOfWork unitOfWork
@{
    ViewData["Title"] = "Add Order";
    var m = new OrderValueViewModel();
    var id = 1;
    List<int> DistributorLicenseId = ((List<int>)ViewBag.LicenseId).Count() == 0 ? new List<int>() : (List<int>)ViewBag.LicenseId;
    List<int> LicenseFormList = new LicenseControlBLL(unitOfWork).Where(x => x.IsMandatory == true).Select(x => x.Id).ToList();
}

<style>
    .ordervalue > tbody > tr > td {
        text-align: center;
        vertical-align: middle;
        padding: 1px;
    }

    .ordervalue > thead > tr > th {
        text-align: center;
        vertical-align: middle;
        padding: 0;
    }

    .ordervalue > tr {
        padding: 0;
        font-size: 11px
    }

    .card-header {
        padding: 5px 15px 0px 46%;
    }

    div.sticky {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 1
    }

    body {
        overflow-x: hidden;
    }

    .col-lg-2 {
        flex-basis: 10.6667%
    }
</style>

<form asp-controller="OrderForm"
      asp-action="SaveEdit"
      id="frmOrderMaster"
      data-ajax-begin="Begin"
      data-ajax-success="Success"
      data-ajax="true"
      data-ajax-method="POST"
      enctype="multipart/form-data">
    @Html.HiddenFor(e => e.Id)
    <div class="content-wrapper">
        <section class="content-header">
            <div class="container-fluid sticky" id="pageHeader">
                <div class="row">
                    <div class="col-12">
                        <div class="card card-primary h-90">
                            <div class="card-header">
                                <h3 class="card-title text-center">Order Form</h3>
                                <div class="card-tools">
                                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                                </div>
                            </div>
                            <div class="card-body p-0" id="UpdateOrderValueId">
                                @if (Model.Id > 0)
                                {
                                    <partial name="OrderValue" model="Model.OrderValues" />
                                }
                                else
                                {
                                    <partial name="OrderValue" model="m" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12">
                        <div class="card card-primary grid">
                            <div class="card-header">
                                <h3 class="card-title">Order Quantities</h3>
                                <div class="card-tools">
                                    <button type="button" class="btn btn-tool" data-card-widget="maximize"><i class="fas fa-expand"></i></button>
                                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                                </div>
                            </div>
                            <div class="card-body">

                                <div class="row">
                                    <div class="col-lg-12 scrollmenu" style="height: 480px;">
                                        <table id="example1" class="table table-bordered table-condensed table-hover table-striped" style="width: 150%">
                                            <thead>
                                                <tr>
                                                    <th>Code</th>
                                                    <th>Product Name</th>
                                                    <th>Pack Size</th>
                                                    <th>Carton Size</th>
                                                    <th>SF Size</th>
                                                    <th>Qty. (Units)</th>
                                                    <th>Pending Qty</th>
                                                    <th>Current Stock</th>
                                                    <th>Trade Price</th>
                                                    <th>Discount</th>
                                                    <th>Net Value</th>
                                                    <th>QTY. (CTN)</th>
                                                    <th>QTY. (SF)</th>
                                                    <th>QTY. (Loose)</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < Model.ProductDetails.Count(); i++)
                                                {
                                                    <tr>
                                                        <td>
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].Id)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ProductMasterId)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ProductMaster.CartonSize)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ProductMaster.SFSize)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.LicenseControlId)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.S_OrderType)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.SaleOrganization)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.DistributionChannel)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.Division)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.DispatchPlant)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.S_StorageLocation)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.SalesItemCategory)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ParentDistributor)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.SalesTax, htmlAttributes: new { @class = "SalesTax d-none" })
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.IncomeTax, htmlAttributes: new { @class = "IncomeTax d-none" })
                                                            @Model.ProductDetails[i].ProductDetail.ProductMaster.SAPProductCode
                                                        </td>
                                                        <td>@Model.ProductDetails[i].ProductDetail.ProductMaster.ProductDescription</td>
                                                        <td>@Model.ProductDetails[i].ProductDetail.ProductMaster.PackSize</td>
                                                        <td><span class="CurtonSize">@Model.ProductDetails[i].ProductDetail.ProductMaster.CartonSize</span></td>
                                                        <td><span class="SFSize">@Model.ProductDetails[i].ProductDetail.ProductMaster.SFSize</span></td>
                                                        <td>
                                                            <input type="text" asp-for="@Model.ProductDetails[i].ProductDetail.ProductMaster.Quantity" value="@Model.ProductDetails[i].ProductDetail.ProductMaster.Quantity"
                                                                   tabindex="@id"
                                                                   ProductId="@Model.ProductDetails[i].ProductDetail.ProductMaster.Id"
                                                                   onchange="LoadOrderValue(this);"
                                                                   onkeypress="return isNumberKey(event)"
                                                                   class="form-control ApproveQuantity" min="0" max="9999999" pattern="\\d*" maxlength="6"
                                                                   disabled="@(LicenseFormList.Any(x => DistributorLicenseId.Any(y => y == x)) ? (Model.ProductDetails[i].ProductDetail.LicenseControlId != null ? DistributorLicenseId.Contains((int)Model.ProductDetails[i].ProductDetail.LicenseControlId) ? null : "disabled" : null) : "disabled")" />
                                                        </td>
                                                        <td>@Model.ProductDetails[i].ProductDetail.PendingQuantity</td>
                                                        <td></td>
                                                        <td>@Html.TextBoxFor(e => Model.ProductDetails[i].ProductPrice, htmlAttributes: new { @class = "form-control TradePrice", @readonly = true })</td>
                                                        <td><span class="Discount">@Model.ProductDetails[i].Discount</span> %</td>
                                                        <td>@Html.TextBoxFor(e => Model.ProductDetails[i].ProductDetail.TotalPrice, htmlAttributes: new { @class = "form-control TotalPrice", @readonly = true, type = "number" })</td>
                                                        <td><span class="CurtonQty"></span></td>
                                                        <td><span class="QtySF"></span></td>
                                                        <td><span class="QtyLoose"></span></td>
                                                    </tr>
                                                    id++;
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-9 col-md-9 col-sm-12 col-xs-12">
                                        <label style="margin-top: 15px;">Total Value of Order:&nbsp;&nbsp;&nbsp;</label><strong><span id="OrderValue"></span></strong>
                                    </div>
                                    <div class="col-lg-1 offset-11">
                                        <button type="button" onclick="LoadModal();" class="btn btn-primary pull-right" style="margin-top: 28px"><i class="fa fa-arrow-right"></i>&nbsp;Next</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
    <div class="modal fade" id="modal-OrderModal" aria-modal="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    <h4 class="modal-title">Create New Order</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <label>Additional Information</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">

                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <h6>Reference No</h6>
                                <input type="text" asp-for="@Model.ReferenceNo" id="ReferenceNo" class="form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <h6>Attachment</h6>
                                <div class="form-group">
                                    <div class="custom-file">
                                        <input type="file" asp-for="@Model.AttachmentFormFile" class="form-control custom-file-input" id="customFile" accept="application/pdf, image/*" />
                                        <label class="custom-file-label" for="customFile">Choose file</label>
                                        <span asp-validation-for="@Model.AttachmentFormFile" class="text-danger"></span>
                                    </div>
                                </div>
                                <span class="caption">
                                    <a asp-action="GetFile" asp-controller="Home" asp-route-filepath="@(Model != null & !string.IsNullOrEmpty(Model.Attachment) ? Model.Attachment : "")" target="_blank">@(Model != null & !string.IsNullOrEmpty(Model.Attachment) ? Model.Attachment.Split('_')[1] : "")</a>
                                </span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <h6>Remarks</h6>
                                <input type="text" asp-for="@Model.Remarks" id="Remarks" class="form-control" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer justify-content-between">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" onclick="return SaveEdit(this);" name="Submit" value="@SubmitStatus.Submit" class="btn btn-success float-right">Submit</button>
                    <button type="submit" onclick="return DraftForm(this);" name="Draft" value="@SubmitStatus.Draft" class="btn btn-info float-right mr-3">Draft</button>
                    <input type="hidden" name="btnSubmit" value="">
                </div>
            </div>
        </div>
    </div>
</form>
@*<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>*@

<script>

    function Success(data) {

        if (data.data != undefined) {
            if (data.data.Status && data.data != undefined) {
                Toast.fire({
                    icon: 'success',
                    title: data.data.Message
                });
                if (data.data.SignalRResponse !== null) {
                    var result = CallSignalR(data.data.SignalRResponse);
                    if (result) {
                        setTimeout(function () {
                            window.location = data.data.RedirectURL;
                        }, 1000);
                    }
                }
                else {
                    setTimeout(function () {
                        window.location = data.data.RedirectURL;
                    }, 1000);
                }
            } else {

                Toast.fire({
                    icon: 'error',
                    title: data.data.Message
                });
                $("#example1").dataTable().fnDestroy();
                $("#example1").DataTable({
                    paging: false,
                    "lengthMenu": [[-1], ["All"]],
                    responsive: true,
                    autoWidth: false,
                    order: []
                });

                $('button[type="submit"]').attr('disabled', false);
                $('button[type="button"]').attr('disabled', false);

                if ($("button[type=submit]", this)[0] != undefined) {
                    Ladda.create($("button[type=submit]", this)[0]).stop();
                }
                if ($("button[type=button]", this)[0] != undefined) {
                    Ladda.create($("button[type=button]", this)[0]).stop();
                }
                if ($(".ladda-button")[0] != undefined) {
                    Ladda.create($(".ladda-button")[0]).stop();
                }
                UnBlockUI();
                $("body").removeClass("loading");
            }
        }
    }


    function isNumberKey(evt) {

        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode == 46) {
            return false;
        }
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function LoadModal() {
        $('#modal-OrderModal').modal('toggle');
    }

    function SaveEdit() {

        BlockUI();
        $('#example1').dataTable().fnDestroy();
        $("#example1").DataTable({
            "lengthMenu": [[-1], ["All"]]
        });
            $('#SubmitStatus').val('1');
            Swal.fire({
                html: "<p style='text-align: justify'>All prices and order amount are based on current rates which are subject to change without prior notice. Invoicing will be done according to the rate exist at the time of delivery and the same would be payable by the customer. In case of any error, the company reserves the right to re-invoice with correct price</p>",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Order Place!'
            }).then((result) => {

                if (result.value == true) {
                    $('[name="btnSubmit"]').val("Submit");
                    $('#frmOrderMaster').submit();
                    LoadModal();
                } else {
                    UnBlockUI();
                        
                        $("#example1").dataTable().fnDestroy();
                        $("#example1").DataTable({
                            paging: false,
                            "lengthMenu": [[-1], ["All"]],
                            responsive: true,
                            autoWidth: false,
                            order: []
                        });
                }
            });
        return false;
    }

    $(document).ready(function () {

        $("#example1").DataTable({
            paging: false,
            "lengthMenu": [[-1], ["All"]],
            responsive: true,
            autoWidth: false,
            order: []
        });

        $(window).keydown(function (event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });

        $("input").not($(":submit, :button")).keypress(function (evt) {
            if (evt.keyCode == 13) {
                var next = $('[tabindex="' + (this.tabIndex + 1) + '"]');
                if (next.length) {
                    next.focus();
                    if (next.val() == '0') {
                        next.val('');
                    }
                }
                else
                    $('[tabindex="1"]').focus();
            }

        });

        if ($('#Id').val() != "0") {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCurrentOrderValue", "OrderForm")',
                success: function (response) {
                    $("#OrderValue").html(response.data);
                }
            });
        }
    });

    function LoadOrderValue(data) {
        BlockUI();
        var intmaxvalue = @Int32.MaxValue;
        var quantity = data.value == "" ? "0" : data.value;
        var product = data.getAttribute("ProductId");
        if (quantity > intmaxvalue) {
            Toast.fire({
                icon: 'error',
                title: "Quantity cannot be greater than " + intmaxvalue
            });
        }
        else {
            
            var qty = parseInt(quantity);
            var size = parseInt($(data).parent('td').parent('tr').find('.CurtonSize').text());
            var SFSize = parseInt($(data).parent('td').parent('tr').find('.SFSize').text());
            var tradePrice = parseFloat($(data).parent('td').parent('tr').find('.TradePrice').val());
            var discount = parseFloat($(data).parent('td').parent('tr').find('.Discount').text());
            var SalesTax = parseFloat($(data).parent('td').parent('tr').find('.SalesTax').val());
            var IncomeTax = parseFloat($(data).parent('td').parent('tr').find('.IncomeTax').val());
            var InclusiveSalesTax = (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) + (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) * ((SalesTax / 100))));
            var CalculateIncomeTax = (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) + (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) * ((SalesTax / 100)))) * (IncomeTax / 100);
            var netValue = InclusiveSalesTax + CalculateIncomeTax;
            $(data).parent('td').parent('tr').find('.TotalPrice').val(netValue.toFixed(2));
            //$(data).parent('td').parent('tr').find('#NetValue').val().mask('000,000,000,000');
            if (quantity != "" && quantity != undefined) {
                if (size != 0) {
                    $(data).parent('td').parent('tr').find('.CurtonQty')[0].innerText = Math.ceil(parseInt(quantity) / size).toString();
                        $(data).parent('td').parent('tr').find('.QtySF')[0].innerText = Math.ceil((quantity - ((quantity / size) * size) / SFSize)).toString() == "-Infinity" ? 0 : Math.ceil((quantity - ((quantity / size) * size) / SFSize));
                        $(data).parent('td').parent('tr').find('.QtyLoose')[0].innerText = (quantity - ((quantity / size) * size) + ((quantity - ((quantity / size) * size) / SFSize) * SFSize)).toString() == "NaN" ? 0 : (quantity / size) * size + ((quantity - ((quantity / size) * size) / SFSize) * SFSize);
                }
                else {
                        $(data).parent('td').parent('tr').find('.CurtonQty')[0].innerText = 0;
                        $(data).parent('td').parent('tr').find('.QtySF')[0].innerText = 0;
                        $(data).parent('td').parent('tr').find('.QtyLoose')[0].innerText = 0;
                }
            }
            else {
                    $(data).parent('td').parent('tr').find('.CurtonQty')[0].innerText = "";
                    $(data).parent('td').parent('tr').find('.QtySF')[0].innerText = "";
                    $(data).parent('td').parent('tr').find('.QtyLoose')[0].innerText = "";
            }
            $.ajax({
                    type: "GET",
                    url: '@Url.Action("ApprovedOrderValue", "OrderForm")',
                    data: { 'Quantity': quantity, 'Product': product },
                    cache: false,
                    success: function(response) {
                        $("#UpdateOrderValueId").html(response);
                    },
                complete: function (response) {
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetCurrentOrderValue", "OrderForm")',
                        success: function (response) {
                            $("#OrderValue").html(response.data);
                        }
                    });
                }
            });
        }
        UnBlockUI();
    }

    function SubmitForm() {
        BlockUI();

        Swal.fire({
            title: 'Are you sure?',
            html: "<p style='text-align: justify'>All prices and order amount are based on current rates which are subject to change without prior notice. Invoicing will be done according to the rate exist at the time of delivery and the same would be payable by the customer. In case of any error, the company reserves the right to re-invoice with correct price</p>",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Order Place!'
        }).then((result) => {
            UnBlockUI();
            if (result.value == true) {
                $('#frmOrderMaster').submit();
            }
        });
        UnBlockUI();
        return false;
    }

    function DraftForm() {

        $('#example1').dataTable().fnDestroy();
        $("#example1").DataTable({
            "lengthMenu": [[-1], ["All"]]
        });

        $("#frmOrderMaster").submit(function () {
            $('[name="btnSubmit"]').val("Draft");
            LoadModal();
        });
    }

</script>

