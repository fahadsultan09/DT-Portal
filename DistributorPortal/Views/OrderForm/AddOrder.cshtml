@model OrderViewModel
@inject IUnitOfWork unitOfWork
@{
    ViewData["Title"] = "Add Order";
    var m = new OrderValueViewModel();
    var id = 1;
    List<int> DistributorLicenseId = ((List<int>)ViewBag.LicenseId).Count() == 0 ? new List<int>() : (List<int>)ViewBag.LicenseId;
    List<int> LicenseFormList = new LicenseControlBLL(unitOfWork).Where(x => x.IsMandatory && x.IsActive && !x.IsDeleted).Select(x => x.Id).ToList();
}
<style>
    .ordervalue > tbody > tr > td {
        text-align: center;
        vertical-align: middle;
        padding: 1px;
    }

    .ordervalue > thead > tr > th {
        text-align: center;
        vertical-align: middle;
        padding: 0;
    }

    .ordervalue > tr {
        padding: 0;
        font-size: 11px
    }

    .card-header {
        padding: 5px 15px 0px 46%;
    }

    div.sticky {
        position: relative;
        top: 0;
        z-index: 1
    }

    body {
        overflow-x: hidden;
    }

    .col-lg-2 {
        flex-basis: 10.6667%
    }
</style>

<form asp-controller="OrderForm"
      asp-action="SaveEdit"
      id="frmOrderMaster"
      data-ajax-begin="Begin"
      data-ajax-success="Success"
      data-ajax="true"
      data-ajax-method="POST"
      enctype="multipart/form-data">
    @Html.HiddenFor(e => e.Id)
    <div class="content-wrapper">
        <section class="content-header">
            <div class="container-fluid sticky" id="pageHeader">
                <div class="row">
                    <div class="col-12">
                        <div class="card card-primary h-90">
                            <div class="card-header">
                                <h3 class="card-title text-center">Order Form</h3>
                                <div class="card-tools">
                                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                                </div>
                            </div>
                            <div class="card-body p-0" id="UpdateOrderValueId">
                                @if (Model.Id > 0)
                                {
                                    <partial name="OrderValue" model="Model.OrderValues" />
                                }
                                else
                                {
                                    <partial name="OrderValue" model="m" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12">
                        <div class="card card-primary grid">
                            <div class="card-header">
                                <h3 class="card-title">Order Quantities</h3>
                                <div class="card-tools">
                                    <button type="button" class="btn btn-tool" data-card-widget="maximize"><i class="fas fa-expand"></i></button>
                                    <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                                </div>
                            </div>
                            <div class="card-body">

                                <div class="row">
                                    <div class="col-lg-12 scrollmenu" style="height: 480px;">
                                        <table id="example1" class="table table-head-fixed table-bordered table-condensed table-hover table-striped" style="width: 140%">
                                            <thead>
                                                <tr>
                                                    <th>Code</th>
                                                    <th>Product Name</th>
                                                    <th>Pack Size</th>
                                                    <th>Carton Size</th>
                                                    <th>SF Size</th>
                                                    <th>Qty. (Units)</th>
                                                    <th>Pending Qty</th>
                                                    <th>Current Stock</th>
                                                    <th>Trade Price</th>
                                                    <th>Discount</th>
                                                    <th>Advance Income Tax</th>
                                                    <th>Sales Tax</th>
                                                    <th>Additional Sales Tax</th>
                                                    <th>Net Value</th>
                                                    <th>QTY. (CTN)</th>
                                                    <th>QTY. (SF)</th>
                                                    <th>QTY. (Loose)</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < Model.ProductDetails.Count(); i++)
                                                {
                                                    <tr>
                                                        <td>
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].Id)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ProductMasterId)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ProductMaster.CartonSize)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ProductMaster.SFSize)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.LicenseControlId)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.S_OrderType)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.SaleOrganization)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.DistributionChannel)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.Division)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.DispatchPlant)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.S_StorageLocation)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.SalesItemCategory)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].ProductDetail.ParentDistributor)
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].SalesTax, htmlAttributes: new { @class = "SalesTax d-none" })
                                                            @Html.HiddenFor(e => Model.ProductDetails[i].IncomeTax, htmlAttributes: new { @class = "IncomeTax d-none" })
                                                            @Model.ProductDetails[i].ProductDetail.ProductMaster.SAPProductCode
                                                        </td>
                                                        <td>
                                                            @Model.ProductDetails[i].ProductDetail.ProductMaster.ProductDescription
                                                        </td>
                                                        <td>@Model.ProductDetails[i].ProductDetail.ProductMaster.PackSize</td>
                                                        <td><span class="CurtonSize">@Model.ProductDetails[i].ProductDetail.ProductMaster.CartonSize</span></td>
                                                        <td><span class="SFSize">@Model.ProductDetails[i].ProductDetail.ProductMaster.SFSize</span></td>
                                                        <td>
                                                            <input type="text" asp-for="@Model.ProductDetails[i].ProductDetail.ProductMaster.Quantity" value="@Model.ProductDetails[i].ProductDetail.ProductMaster.Quantity"
                                                                   tabindex="@id"
                                                                   ProductId="@Model.ProductDetails[i].ProductDetail.ProductMaster.Id"
                                                                   onchange="LoadOrderValue(this);"
                                                                   onkeypress="return isNumberKey(event)"
                                                                   class="form-control ApproveQuantity" min="0" max="9999999" pattern="\\d*" maxlength="6"
                                                                   disabled="@(LicenseFormList.Any(x => DistributorLicenseId.Any(y => y == x)) || LicenseFormList.Count() == 0
                                                                    ? (Model.ProductDetails[i].ProductDetail.LicenseControlId != null
                                                                    ? DistributorLicenseId.Contains((int)Model.ProductDetails[i].ProductDetail.LicenseControlId) ? null : "disabled" : "disabled")
                                                                    : "disabled")" />
                                                        </td>
                                                        <td>@Model.ProductDetails[i].PendingQuantity</td>
                                                        <td></td>
                                                        <td>@Html.TextBoxFor(e => Model.ProductDetails[i].ProductPrice, htmlAttributes: new { @class = "form-control TradePrice", @readonly = true })</td>
                                                        <td><span class="Discount">@Model.ProductDetails[i].Discount</span> %</td>
                                                        <td>@Model.ProductDetails[i].IncomeTax %</td>
                                                        <td>@Model.ProductDetails[i].ViewSalesTax %</td>
                                                        <td>@Model.ProductDetails[i].AdditionalSalesTax %</td>
                                                        <td>@Html.TextBoxFor(e => Model.ProductDetails[i].ProductDetail.TotalPrice, htmlAttributes: new { @class = "form-control TotalPrice", @readonly = true, type = "number" })</td>
                                                        <td><input type="text" asp-for="@Model.ProductDetails[i].ProductDetail.QuanityCarton" value="@Model.ProductDetails[i].ProductDetail.QuanityCarton" class="form-control CurtonQty" readonly="readonly"></td>
                                                        <td><input type="text" asp-for=">@Model.ProductDetails[i].ProductDetail.QuanitySF" value="@Model.ProductDetails[i].ProductDetail.QuanitySF" class="form-control QtySF" readonly="readonly"></td>
                                                        <td><input type="text" asp-for="@Model.ProductDetails[i].ProductDetail.QuanityLoose" value="@Model.ProductDetails[i].ProductDetail.QuanityLoose" class="form-control QtyLoose" readonly="readonly"></td>
                                                    </tr>
                                                    id++;
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class=" row">
                                    <div class="col-lg-9 col-md-9 col-sm-12 col-xs-12">
                                        <label style="margin-top: 15px;">Total Value of Order:&nbsp;&nbsp;&nbsp;</label><strong><span id="OrderValue"></span></strong>
                                    </div>
                                    <div class="col-lg-1 offset-11">
                                        <button type="button" onclick="LoadModal();" class="btn btn-primary pull-right"><i class="fa fa-arrow-right"></i>&nbsp;Next</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
    <div class="modal fade" id="modal-OrderModal" aria-modal="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    <h4 class="modal-title">Create New Order</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <label>Additional Information</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">

                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <h6>Reference No</h6>
                                <input type="text" asp-for="@Model.ReferenceNo" id="ReferenceNo" class="form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <h6>Attachment</h6>
                                <div class="form-group">
                                    <div class="custom-file">
                                        <input type="file" asp-for="@Model.AttachmentFormFile" class="form-control custom-file-input" id="customFile" accept="application/pdf, image/*" />
                                        <label class="custom-file-label" for="customFile">Choose file</label>
                                        <span asp-validation-for="@Model.AttachmentFormFile" class="text-danger"></span>
                                    </div>
                                </div>
                                <span class="caption">
                                    <a asp-action="GetFile" asp-controller="Home" asp-route-filepath="@(Model != null & !string.IsNullOrEmpty(Model.Attachment) ? Model.Attachment : "")" target="_blank">@(Model != null & !string.IsNullOrEmpty(Model.Attachment) ? Model.Attachment.Split('_')[1] : "")</a>
                                </span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <h6>Remarks</h6>
                                <input type="text" asp-for="@Model.Remarks" id="Remarks" class="form-control" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer justify-content-between">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" onclick="return SubmitForm(this);" name="Submit" value="@SubmitStatus.Submit" class="btn btn-success float-right ladda-button">Submit</button>
                    <button type="button" onclick="return DraftForm(this);" name="Draft" value="@SubmitStatus.Draft" class="btn btn-info float-right mr-3 ladda-button">Draft</button>
                </div>
            </div>
        </div>
    </div>
</form>

<script>

    function Success(data) {

        if (data.data != undefined) {
            if (data.data.Status && data.data != undefined) {
                Toast.fire({
                    icon: 'success',
                    title: data.data.Message
                });
                if (data.data.SignalRResponse !== null) {
                    var result = CallSignalR(data.data.SignalRResponse);
                    if (result) {
                        window.location = data.data.RedirectURL;
                    }
                }
                else {
                    window.location = data.data.RedirectURL;
                }
            } else {

                Toast.fire({
                    icon: 'error',
                    title: data.data.Message
                });
                $("#example1").dataTable().fnDestroy();
                $("#example1").DataTable({
                    paging: false,
                    "lengthMenu": [[-1], ["All"]],
                    responsive: true,
                    autoWidth: false,
                    "order": [[1, "asc"]]
                });

                $('button[type="submit"]').attr('disabled', false);
                $('button[type="button"]').attr('disabled', false);

                if ($("button[type=submit]", this)[0] != undefined) {
                    Ladda.create($("button[type=submit]", this)[0]).stop();
                }
                if ($("button[type=button]", this)[0] != undefined) {
                    Ladda.create($("button[type=button]", this)[0]).stop();
                }
                if ($(".ladda-button")[0] != undefined) {
                    Ladda.create($(".ladda-button")[0]).stop();
                }
                UnBlockUI();
                $("body").removeClass("loading");
            }
        }
    }

    function isNumberKey(evt) {

        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode == 46) {
            return false;
        }
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function LoadModal() {
        $('#modal-OrderModal').modal('toggle');
    }

    function SaveEdit() {

        BlockUI();
        $('#SubmitStatus').val('1');
        Swal.fire({
            html: "<p style='text-align: justify'>All prices and order amount are based on current rates which are subject to change without prior notice. Invoicing will be done according to the rate exist at the time of delivery and the same would be payable by the customer. In case of any error, the company reserves the right to re-invoice with correct price</p>",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Order Place!'
        }).then((result) => {

            if (result.value == true) {
                $('[name="btnSubmit"]').val("Submit");
                $('#frmOrderMaster').submit();
                LoadModal();
            }
            else {
                UnBlockUI();
            }
        });
        return false;
    }

    $(document).ready(function () {

        $("#example1").DataTable({
            paging: false,
            "lengthMenu": [[-1], ["All"]],
            responsive: true,
            autoWidth: false,
            "order": [[1, "asc"]]
        });

        $(window).keydown(function (event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });

        $("input").not($(":submit, :button")).keypress(function (evt) {
            if (evt.keyCode == 13) {
                var next = $('[tabindex="' + (this.tabIndex + 1) + '"]');
                if (next.length) {
                    next.focus();
                    if (next.val() == '0') {
                        next.val('');
                    }
                }
                else
                    $('[tabindex="1"]').focus();
            }
        });

        if ($('#Id').val() != "0") {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCurrentOrderValue", "OrderForm")',
                success: function (response) {
                    $("#OrderValue").html(response.data);
                }
            });
        }
    });

    function LoadOrderValue(data) {
        BlockUI();
        var intmaxvalue = @Int32.MaxValue;
        var quantity;
        if (data.value == "") {
            quantity = 0;
            data.value = 0;
        }
        else {
            quantity = data.value;
        }
        var product = data.getAttribute("ProductId");

        if (quantity > intmaxvalue) {
            Toast.fire({
                icon: 'error',
                title: "Quantity cannot be greater than " + intmaxvalue
            });
        }
        else {
            var qty = parseInt(quantity);
            var CurtonSize = parseFloat($(data).parent('td').parent('tr').find('.CurtonSize').text());
            var SFSize = parseFloat($(data).parent('td').parent('tr').find('.SFSize').text());
            var tradePrice = parseFloat($(data).parent('td').parent('tr').find('.TradePrice').val());
            var discount = parseFloat($(data).parent('td').parent('tr').find('.Discount').text());
            var SalesTax = parseFloat($(data).parent('td').parent('tr').find('.SalesTax').val());
            var IncomeTax = parseFloat($(data).parent('td').parent('tr').find('.IncomeTax').val());
            var InclusiveSalesTax = (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) + (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) * ((SalesTax / 100))));
            var CalculateIncomeTax = (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) + (((qty * tradePrice) * (1 - ((-1 * discount) / 100))) * ((SalesTax / 100)))) * (IncomeTax / 100);
            var netValue = InclusiveSalesTax + CalculateIncomeTax;
            $(data).parent('td').parent('tr').find('.TotalPrice').val(netValue.toFixed(2));

            if (quantity != "" && quantity != undefined) {

                var CartonQuantity = CalculateCartonQuantity(qty, CurtonSize);
                var SFQuantity = CalculateSFQuantity(qty, CartonQuantity, CurtonSize, SFSize);
                var SFLooseQuantity = CalculateSFLooseQuantity(qty, CartonQuantity, CurtonSize, SFQuantity, SFSize);
                var LooseQuantity = CalculateLooseQuantity(qty, CurtonSize);

                if (CurtonSize != 0 && SFSize != 0) {
                    $(data).parent('td').parent('tr').find('.CurtonQty').text(CartonQuantity);
                    $(data).parent('td').parent('tr').find('.QtySF').text(SFQuantity);
                    $(data).parent('td').parent('tr').find('.QtyLoose').text(SFLooseQuantity);
                    $(data).parent('td').parent('tr').find('.CurtonQty').val(CartonQuantity);
                    $(data).parent('td').parent('tr').find('.QtySF').val(SFQuantity);
                    $(data).parent('td').parent('tr').find('.QtyLoose').val(SFLooseQuantity);
                }
                else if (CurtonSize != 0 && SFSize == 0) {
                    $(data).parent('td').parent('tr').find('.CurtonQty').text(CartonQuantity);
                    $(data).parent('td').parent('tr').find('.QtySF').text(0);
                    $(data).parent('td').parent('tr').find('.QtyLoose').text(LooseQuantity);
                    $(data).parent('td').parent('tr').find('.CurtonQty').val(CartonQuantity);
                    $(data).parent('td').parent('tr').find('.QtySF').val(0);
                    $(data).parent('td').parent('tr').find('.QtyLoose').val(LooseQuantity);
                }
                else {
                    $(data).parent('td').parent('tr').find('.CurtonQty').text('0');
                    $(data).parent('td').parent('tr').find('.QtySF').text('0');
                    $(data).parent('td').parent('tr').find('.QtyLoose').text('0');
                    $(data).parent('td').parent('tr').find('.CurtonQty').val('0');
                    $(data).parent('td').parent('tr').find('.QtySF').val('0');
                    $(data).parent('td').parent('tr').find('.QtyLoose').val('0');
                }
            }
            else {
                $(data).parent('td').parent('tr').find('.CurtonQty').text('0');
                $(data).parent('td').parent('tr').find('.QtySF').text('0');
                $(data).parent('td').parent('tr').find('.QtyLoose').text('0');
                $(data).parent('td').parent('tr').find('.CurtonQty').val('0');
                $(data).parent('td').parent('tr').find('.QtySF').val('0');
                $(data).parent('td').parent('tr').find('.QtyLoose').val('0');
            }
            $.ajax({
                type: "GET",
                url: '@Url.Action("ApprovedOrderValue", "OrderForm")',
                data: { 'Quantity': quantity, 'Product': product },
                cache: false,
                success: function (response) {
                    UnBlockUI();
                    $("#UpdateOrderValueId").html(response);
                    $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetCurrentOrderValue", "OrderForm")',
                        success: function (response) {
                            $("#OrderValue").html(response.data);
                        }
                    });
                },
                error: function () {
                    UnBlockUI();
                }
            });
        }
    }

    function SubmitForm() {
        Ladda.create($(".ladda-button")[0]).start();
        BlockUI();
        Swal.fire({
            html: "<p style='text-align: justify'>All prices and order amount are based on current rates which are subject to change without prior notice. Invoicing will be done according to the rate exist at the time of delivery and the same would be payable by the customer. In case of any error, the company reserves the right to re-invoice with correct price</p>",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Order Place!'
        }).then((result) => {

            if (result.value == true) {
                LoadModal();
                $('#example1').dataTable().fnDestroy();
                $("#example1").DataTable({
                    "lengthMenu": [[-1], ["All"]]
                });
                $.ajax({
                type: 'POST',
                url: '@Url.Content("~/OrderForm/SaveEdit")',
                    datatype: "JSON",
                    data: $("#frmOrderMaster").serialize() + "&btnSubmit=Submit",
                    success: function (data) {

                        if (data) {
                            if (data.data.Status) {
                                Toast.fire({ icon: 'success', title: data.data.Message });
                            } else {
                                if ($(".ladda-button")[0] != undefined) {
                                    Ladda.create($(".ladda-button")[0]).stop();
                                }
                                UnBlockUI();
                                Toast.fire({ icon: 'error', title: data.data.Message });
                                return false;
                            }
                            if (data.data.SignalRResponse !== null) {
                                CallSignalR(data.data.SignalRResponse);
                            }
                            window.location = data.data.RedirectURL;
                        } else {
                            if ($(".ladda-button")[0] != undefined) {
                                Ladda.create($(".ladda-button")[0]).stop();
                            }
                            UnBlockUI();
                            Toast.fire({ icon: 'error', title: 'Error occured while saving changes.' });
                            return false;
                        }
                    }
                });
            }
            else {
                if ($(".ladda-button")[0] != undefined) {
                    Ladda.create($(".ladda-button")[0]).stop();
                }
                UnBlockUI();
            }
        });
    }

    function DraftForm() {
        Ladda.create($(".ladda-button")[0]).start();
        Ladda.create($(".ladda-button")[1]).start();
        setTimeout(function () {
        BlockUI();
        LoadModal();
        $('#example1').dataTable().fnDestroy();
        $("#example1").DataTable({
            "lengthMenu": [[-1], ["All"]]
        });
        $.ajax({
        type: 'POST',
        url: '@Url.Content("~/OrderForm/SaveEdit")',
            datatype: "JSON",
            data: $("#frmOrderMaster").serialize() + "&btnSubmit=Draft",
            success: function (data) {

                if (data) {
                    if (data.data.Status) {
                        Toast.fire({ icon: 'success', title: data.data.Message });
                    } else {
                        UnBlockUI();
                        if ($(".ladda-button")[1] != undefined) {
                            Ladda.create($(".ladda-button")[0]).stop();
                            Ladda.create($(".ladda-button")[1]).stop();
                        }
                        Toast.fire({ icon: 'error', title: data.data.Message });
                        return false;
                    }
                    if (data.data.SignalRResponse !== null) {
                        CallSignalR(data.data.SignalRResponse);
                    }
                    window.location = data.data.RedirectURL;
                } else {
                    if ($(".ladda-button")[q] != undefined) {
                        Ladda.create($(".ladda-button")[0]).stop();
                        Ladda.create($(".ladda-button")[1]).stop();
                    }
                    UnBlockUI();
                    Toast.fire({ icon: 'error', title: 'Error occured while saving changes.' });
                    return false;
                }
            }
        });
        }, 500);
    }

    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
    }

    function CalculateCartonQuantity(qty, CurtonSize) {

        var CartonQuantity = parseFloat(qty) / parseFloat(CurtonSize);
        return Math.floor(CartonQuantity);
    }

    function CalculateSFQuantity(qty, CartonQuantity, CartonSize, SFSize) {

        var a = parseFloat(CartonQuantity) * parseFloat(CartonSize);
        var SFQuantity = parseFloat(parseFloat(qty) - Math.floor(a)) / parseFloat(SFSize);
        return Math.floor(SFQuantity);
    }

    function CalculateSFLooseQuantity(qty, CartonQuantity, CartonSize, SFQuantity, SFSize) {

        var a = parseFloat(CartonQuantity) * parseFloat(CartonSize);
        var b = parseFloat(SFQuantity) * parseFloat(SFSize);
        var LooseQuantity = parseFloat(qty) - parseFloat(a) - parseFloat(b);
        return LooseQuantity;
    }

    function CalculateLooseQuantity(qty, CurtonSize) {

        var LooseQuantity = parseFloat(qty) % parseFloat(CurtonSize);
        return LooseQuantity;
    }

</script>

